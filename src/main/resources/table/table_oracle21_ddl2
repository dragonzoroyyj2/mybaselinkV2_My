-- USERS SEQUENCE
CREATE SEQUENCE USERS_SEQ START WITH 1 INCREMENT BY 1;

-- USERS TABLE
CREATE TABLE USERS (
    ID NUMBER(19,0) NOT NULL,
    USERNAME VARCHAR2(50) NOT NULL,
    PASSWORD VARCHAR2(255 CHAR) NOT NULL,
    EMAIL VARCHAR2(100 CHAR),
    FULL_NAME VARCHAR2(100 CHAR),
    PHONE VARCHAR2(20 CHAR),
    ROLE VARCHAR2(50 CHAR) DEFAULT 'ADMIN',
    STATUS VARCHAR2(10 CHAR) DEFAULT 'active',
    LAST_LOGIN TIMESTAMP WITH TIME ZONE,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    CONSTRAINT USERS_PK PRIMARY KEY (ID),
    CONSTRAINT USERS_USERNAME_UK UNIQUE (USERNAME),
    CONSTRAINT USERS_EMAIL_UK UNIQUE (EMAIL)
);

-- USERS AUTO ID TRIGGER
CREATE OR REPLACE TRIGGER USERS_BI
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;

    IF :NEW.CREATED_AT IS NULL THEN
        :NEW.CREATED_AT := SYSTIMESTAMP;
    END IF;

    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/




-- ROLES SEQUENCE
CREATE SEQUENCE ROLES_SEQ START WITH 1 INCREMENT BY 1;

-- ROLES TABLE
CREATE TABLE ROLES (
    ID NUMBER(19,0) NOT NULL,
    NAME VARCHAR2(50 CHAR) NOT NULL,
    DESCRIPTION VARCHAR2(4000),
    CONSTRAINT ROLES_PK PRIMARY KEY (ID),
    CONSTRAINT ROLES_NAME_UK UNIQUE (NAME)
);

-- ROLES AUTO ID TRIGGER
CREATE OR REPLACE TRIGGER ROLES_BI
BEFORE INSERT ON ROLES
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/




-- USER_ROLES SEQUENCE
CREATE SEQUENCE USER_ROLES_SEQ START WITH 1 INCREMENT BY 1;

-- USER_ROLES TABLE
CREATE TABLE USER_ROLES (
    USER_ID NUMBER(19,0) NOT NULL,
    ROLE_ID NUMBER(19,0) NOT NULL,
    ID NUMBER(19,0) NOT NULL,
    CONSTRAINT USER_ROLES_PK PRIMARY KEY (USER_ID, ROLE_ID),
    CONSTRAINT USER_ROLES_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    CONSTRAINT USER_ROLES_ROLE_FK FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);

-- USER_ROLES ID TRIGGER
CREATE OR REPLACE TRIGGER USER_ROLES_BI
BEFORE INSERT ON USER_ROLES
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT USER_ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/




-- JWT TOKENS SEQUENCE
CREATE SEQUENCE JWT_TOKENS_SEQ START WITH 1 INCREMENT BY 1;

-- JWT TOKENS TABLE
CREATE TABLE JWT_TOKENS (
    ID NUMBER(19,0) NOT NULL,
    USERNAME VARCHAR2(255 CHAR) NOT NULL,
    TOKEN VARCHAR2(512 CHAR) NOT NULL,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    ISSUED_AT TIMESTAMP WITH TIME ZONE,
    EXPIRES_AT TIMESTAMP WITH TIME ZONE,
    REVOKED CHAR(1) DEFAULT '0' CHECK (REVOKED IN ('0','1')),
    CONSTRAINT JWT_TOKENS_PK PRIMARY KEY (ID),
    CONSTRAINT JWT_TOKENS_TOKEN_UK UNIQUE (TOKEN)
);

-- JWT TOKENS TRIGGER
CREATE OR REPLACE TRIGGER JWT_TOKENS_BI
BEFORE INSERT ON JWT_TOKENS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT JWT_TOKENS_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;

    IF :NEW.CREATED_AT IS NULL THEN
        :NEW.CREATED_AT := SYSTIMESTAMP;
    END IF;
END;
/



-- LOGIN_USERS SEQUENCE
CREATE SEQUENCE LOGIN_USERS_SEQ START WITH 1 INCREMENT BY 1;

-- LOGIN_USERS TABLE
CREATE TABLE LOGIN_USERS (
    ID NUMBER(19,0) NOT NULL,
    EMAIL VARCHAR2(100 CHAR),
    NAME VARCHAR2(50 CHAR),
    PASSWORD VARCHAR2(100 CHAR) NOT NULL,
    ROLE VARCHAR2(20 CHAR) NOT NULL,
    USERNAME VARCHAR2(50 CHAR) NOT NULL,
    CONSTRAINT LOGIN_USERS_PK PRIMARY KEY (ID),
    CONSTRAINT LOGIN_USERS_USERNAME_UK UNIQUE (USERNAME)
);

-- LOGIN_USERS TRIGGER
CREATE OR REPLACE TRIGGER LOGIN_USERS_BI
BEFORE INSERT ON LOGIN_USERS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT LOGIN_USERS_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/

