-- 외래키 먼저 삭제
ALTER TABLE USER_ROLES DROP CONSTRAINT USER_ROLES_USER_ID_FKEY;
ALTER TABLE USER_ROLES DROP CONSTRAINT USER_ROLES_ROLE_ID_FKEY;

-- 테이블 삭제
DROP TABLE USER_ROLES PURGE;
DROP TABLE ROLES PURGE;
DROP TABLE LOGIN_USERS PURGE;
DROP TABLE JWT_TOKENS PURGE;
DROP TABLE USERS PURGE;

-- 시퀀스 있으면 삭제
DROP SEQUENCE USERS_SEQ;
DROP SEQUENCE USER_ROLES_ID_SEQ;
DROP SEQUENCE ROLES_SEQ;
DROP SEQUENCE JWT_TOKENS_SEQ;

------------------------------------------------------------------------

-- 시퀀스 생성
CREATE SEQUENCE USERS_SEQ START WITH 1 INCREMENT BY 1;

-- 테이블 생성
CREATE TABLE USERS (
    ID NUMBER(19,0) NOT NULL,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(255 CHAR) NOT NULL,
    EMAIL VARCHAR2(100 CHAR),
    FULL_NAME VARCHAR2(100 CHAR),
    PHONE VARCHAR2(20 CHAR),
    ROLE VARCHAR2(50 CHAR) DEFAULT 'ADMIN',
    STATUS VARCHAR2(10 CHAR) DEFAULT 'active',
    LAST_LOGIN TIMESTAMP WITH TIME ZONE,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    CONSTRAINT USERS_PK PRIMARY KEY (ID)
);

-- 트리거 생성
CREATE OR REPLACE TRIGGER USERS_BI
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/



CREATE SEQUENCE JWT_TOKENS_SEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE JWT_TOKENS (
    ID NUMBER(19,0) NOT NULL,
    USERNAME VARCHAR2(255 CHAR) NOT NULL,
    TOKEN VARCHAR2(512 CHAR) NOT NULL UNIQUE,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
    ISSUED_AT TIMESTAMP WITH TIME ZONE,
    EXPIRES_AT TIMESTAMP WITH TIME ZONE,
    REVOKED NUMBER(1) DEFAULT 0,
    CONSTRAINT JWT_TOKENS_PK PRIMARY KEY (ID)
);

CREATE OR REPLACE TRIGGER JWT_TOKENS_BI
BEFORE INSERT ON JWT_TOKENS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT JWT_TOKENS_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/



INSERT INTO USERS (USERNAME, PASSWORD, ROLE, EMAIL, FULL_NAME, PHONE)
VALUES ('admin', '$2a$10$h3rLfhczAHiiKNGjMfYytO5snHTtwY3QlFUptOS0Upu6DYFhnBK/q', 'ADMIN', 'admin@example.com', '관리자', '010-0000-0000');

INSERT INTO USERS (USERNAME, PASSWORD, ROLE, EMAIL, FULL_NAME, PHONE)
VALUES ('test', '$2a$10$h3rLfhczAHiiKNGjMfYytO5snHTtwY3QlFUptOS0Upu6DYFhnBK/q', 'ADMIN', 'test@example.com', '테스트', '010-0000-0000');

COMMIT;





-- 시퀀스
CREATE SEQUENCE ROLES_SEQ START WITH 1 INCREMENT BY 1;

-- 테이블 생성
CREATE TABLE ROLES (
    ID NUMBER(19,0) NOT NULL,
    NAME VARCHAR2(50 CHAR) NOT NULL UNIQUE,
    DESCRIPTION VARCHAR2(4000),
    CONSTRAINT ROLES_PK PRIMARY KEY (ID)
);

-- 트리거
CREATE OR REPLACE TRIGGER ROLES_BI
BEFORE INSERT ON ROLES
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/




-- 시퀀스
CREATE SEQUENCE USER_ROLES_SEQ START WITH 1 INCREMENT BY 1;

-- 테이블
CREATE TABLE USER_ROLES (
    USER_ID NUMBER(19,0) NOT NULL,
    ROLE_ID NUMBER(19,0) NOT NULL,
    ID NUMBER(19,0) NOT NULL,
    CONSTRAINT USER_ROLES_PK PRIMARY KEY (USER_ID, ROLE_ID),
    CONSTRAINT USER_ROLES_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    CONSTRAINT USER_ROLES_ROLE_FK FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);

-- 트리거
CREATE OR REPLACE TRIGGER USER_ROLES_BI
BEFORE INSERT ON USER_ROLES
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT USER_ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/


INSERT INTO ROLES (NAME, DESCRIPTION) VALUES ('ADMIN', '관리자 권한');
INSERT INTO ROLES (NAME, DESCRIPTION) VALUES ('USER', '일반 사용자 권한');
COMMIT;




-- ADMIN 역할 ID 조회
SELECT ID FROM ROLES WHERE NAME = 'ADMIN';

-- 예시: ADMIN 역할 id가 1일 경우
INSERT INTO USER_ROLES (USER_ID, ROLE_ID) VALUES (1, 1);
INSERT INTO USER_ROLES (USER_ID, ROLE_ID) VALUES (2, 1);
COMMIT;


-- 시퀀스 생성
CREATE SEQUENCE LOGIN_USERS_SEQ START WITH 1 INCREMENT BY 1;

-- 테이블 생성
CREATE TABLE LOGIN_USERS (
    ID NUMBER(19,0) NOT NULL,
    EMAIL VARCHAR2(100),
    NAME VARCHAR2(50),
    PASSWORD VARCHAR2(100) NOT NULL,
    ROLE VARCHAR2(20) NOT NULL,
    USERNAME VARCHAR2(50) NOT NULL,
    CONSTRAINT LOGIN_USERS_PK PRIMARY KEY (ID),
    CONSTRAINT LOGIN_USERS_USERNAME_UK UNIQUE (USERNAME)
);

-- 트리거 생성 (ID 자동증가)
CREATE OR REPLACE TRIGGER LOGIN_USERS_BI
BEFORE INSERT ON LOGIN_USERS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT LOGIN_USERS_SEQ.NEXTVAL INTO :NEW.ID FROM dual;
    END IF;
END;
/




